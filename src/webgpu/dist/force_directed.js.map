{"version":3,"sources":["force_directed.ts"],"names":[],"mappings":"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","file":"force_directed.js","sourcesContent":["import { buffer } from \"d3\";\r\nimport { size } from \"mathjs\";\r\nimport {\r\n  compute_forces,\r\n  apply_forces,\r\n  compute_forces_a,\r\n  create_adjacency_matrix,\r\n  compute_forces_combined,\r\n  buildTree,\r\n} from \"./wgsl\";\r\n\r\nclass ForceDirected {\r\n  public paramsBuffer: GPUBuffer;\r\n  public nodeDataBuffer: GPUBuffer;\r\n  public edgeDataBuffer: GPUBuffer;\r\n  public adjMatrixBuffer: GPUBuffer;\r\n  public forceDataBuffer: GPUBuffer;\r\n  public treeBuffer: GPUBuffer;\r\n  public lastIndexBuffer: GPUBuffer;\r\n  public uniformParameterBuffer: GPUBuffer;\r\n  public coolingFactor: number = 0.9;\r\n  public device: GPUDevice;\r\n\r\n  public bindGroupLayoutTree: GPUBindGroupLayout;\r\n  public treePipelineLayout: GPUPipelineLayout;\r\n\r\n  public computeTreePipeline: GPUComputePipeline;\r\n\r\n  public createAdjMatrixPipeline: GPUComputePipeline;\r\n  public computeForcesPipeline: GPUComputePipeline;\r\n  public computeAttractForcesPipeline: GPUComputePipeline;\r\n  public applyForcesPipeline: GPUComputePipeline;\r\n  public iterationCount: number = 10000;\r\n  public threshold: number = 100;\r\n  public force: number = 1000.0;\r\n\r\n  constructor(device: GPUDevice) {\r\n    this.device = device;\r\n\r\n    this.nodeDataBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.edgeDataBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.adjMatrixBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.forceDataBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    this.treeBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    this.lastIndexBuffer = this.device.createBuffer({\r\n      size: 4,\r\n      mappedAtCreation: true,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n    new Int32Array(this.lastIndexBuffer.getMappedRange()).set([0]);\r\n    this.lastIndexBuffer.unmap();\r\n\r\n    this.uniformParameterBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.createAdjMatrixPipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: create_adjacency_matrix,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    this.bindGroupLayoutTree = device.createBindGroupLayout({\r\n      entries: [\r\n        {\r\n          //node\r\n          binding: 0,\r\n          visibility: GPUShaderStage.COMPUTE,\r\n          buffer: {\r\n            type: \"read-only-storage\" as GPUBufferBindingType,\r\n          },\r\n        },\r\n        {\r\n          //tree\r\n          binding: 1,\r\n          visibility: GPUShaderStage.COMPUTE,\r\n          buffer: {\r\n            type: \"storage\" as GPUBufferBindingType,\r\n          },\r\n        },\r\n        {\r\n          //uniform parameter\r\n          binding: 2,\r\n          visibility: GPUShaderStage.COMPUTE,\r\n          buffer: {\r\n            type: \"uniform\" as GPUBufferBindingType,\r\n          },\r\n        },\r\n\r\n        {\r\n          binding: 3,\r\n          visibility: GPUShaderStage.COMPUTE,\r\n          buffer: {\r\n            type: \"storage\" as GPUBufferBindingType,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    this.treePipelineLayout = this.device.createPipelineLayout({\r\n      bindGroupLayouts: [this.bindGroupLayoutTree],\r\n    });\r\n\r\n    this.computeTreePipeline = device.createComputePipeline({\r\n      layout: this.treePipelineLayout,\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: buildTree,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    this.computeForcesPipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: compute_forces_combined,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    this.computeAttractForcesPipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: compute_forces_a,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n      layout: device.createPipelineLayout({\r\n        bindGroupLayouts: [\r\n          device.createBindGroupLayout({\r\n            entries: [\r\n              {\r\n                binding: 0,\r\n                visibility: GPUShaderStage.COMPUTE,\r\n                buffer: {\r\n                  type: \"read-only-storage\" as GPUBufferBindingType,\r\n                },\r\n              },\r\n              {\r\n                binding: 1,\r\n                visibility: GPUShaderStage.COMPUTE,\r\n                buffer: {\r\n                  type: \"read-only-storage\" as GPUBufferBindingType,\r\n                },\r\n              },\r\n              {\r\n                binding: 2,\r\n                visibility: GPUShaderStage.COMPUTE,\r\n                buffer: {\r\n                  type: \"storage\" as GPUBufferBindingType,\r\n                },\r\n              },\r\n              {\r\n                binding: 3,\r\n                visibility: GPUShaderStage.COMPUTE,\r\n                buffer: {\r\n                  type: \"uniform\" as GPUBufferBindingType,\r\n                },\r\n              },\r\n            ],\r\n          }),\r\n        ],\r\n      }),\r\n    });\r\n\r\n    this.applyForcesPipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: apply_forces,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    // Create a buffer to store the params, output, and min/max\r\n    this.paramsBuffer = device.createBuffer({\r\n      size: 4 * 4,\r\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n    });\r\n  }\r\n\r\n  async runForces(\r\n    nodeDataBuffer = this.nodeDataBuffer,\r\n    edgeDataBuffer = this.edgeDataBuffer,\r\n    nodeLength: number = 0,\r\n    edgeLength: number = 0,\r\n    coolingFactor = this.coolingFactor,\r\n    l = 0.05,\r\n    iterationCount = this.iterationCount,\r\n    threshold = this.threshold,\r\n    iterRef\r\n  ) {\r\n    if (nodeLength == 0 || edgeLength == 0) {\r\n      return;\r\n    }\r\n    console.log(l);\r\n    console.log(coolingFactor);\r\n    this.coolingFactor = coolingFactor;\r\n    this.nodeDataBuffer = nodeDataBuffer;\r\n    this.edgeDataBuffer = edgeDataBuffer;\r\n    this.threshold = threshold;\r\n    this.force = 100000;\r\n\r\n    // Set up params (node length, edge length) for creating adjacency matrix\r\n    var upload = this.device.createBuffer({\r\n      size: 4 * 4,\r\n      usage: GPUBufferUsage.COPY_SRC,\r\n      mappedAtCreation: true,\r\n    });\r\n    var mapping = upload.getMappedRange();\r\n    new Uint32Array(mapping).set([nodeLength, edgeLength]);\r\n    new Float32Array(mapping).set([this.coolingFactor, l], 2);\r\n    upload.unmap();\r\n\r\n    this.adjMatrixBuffer = this.device.createBuffer({\r\n      size: nodeLength * nodeLength * 4,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    this.treeBuffer = this.device.createBuffer({\r\n      size: (nodeLength + 1) * 4 * 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    this.uniformParameterBuffer = this.device.createBuffer({\r\n      size: 8,\r\n      usage: GPUBufferUsage.UNIFORM,\r\n      mappedAtCreation: true,\r\n    });\r\n\r\n    let arrInstance = this.uniformParameterBuffer.getMappedRange();\r\n    new Uint8Array(arrInstance).set([nodeLength]);\r\n    new Float32Array(arrInstance).set([0.5], 1);\r\n\r\n    var commandEncoder = this.device.createCommandEncoder();\r\n    commandEncoder.copyBufferToBuffer(upload, 0, this.paramsBuffer, 0, 4 * 4);\r\n    var createBindGroup = this.device.createBindGroup({\r\n      layout: this.createAdjMatrixPipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.edgeDataBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.adjMatrixBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 2,\r\n          resource: {\r\n            buffer: this.paramsBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    var pass = commandEncoder.beginComputePass();\r\n    pass.setBindGroup(0, createBindGroup);\r\n    pass.setPipeline(this.createAdjMatrixPipeline);\r\n    pass.dispatch(1, 1, 1);\r\n    pass.endPass();\r\n    // Log adjacency matrix\r\n    // const gpuReadBuffer = this.device.createBuffer({\r\n    //     size: nodeLength * nodeLength * 4,\r\n    //     usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\r\n    // });\r\n    // // Encode commands for copying buffer to buffer.\r\n    // commandEncoder.copyBufferToBuffer(\r\n    //     this.adjMatrixBuffer /* source buffer */ ,\r\n    //     0 /* source offset */ ,\r\n    //     gpuReadBuffer /* destination buffer */ ,\r\n    //     0 /* destination offset */ ,\r\n    //     nodeLength * nodeLength * 4 /* size */\r\n    // );\r\n    this.device.queue.submit([commandEncoder.finish()]);\r\n\r\n    // Log adjacency matrix (count should be equal to the number of nonduplicate edges)\r\n    // await gpuReadBuffer.mapAsync(GPUMapMode.READ);\r\n    // const arrayBuffer = gpuReadBuffer.getMappedRange();\r\n    // var output = new Uint32Array(arrayBuffer);\r\n    // var count = 0;\r\n    // for (var i = 0; i < output.length; i++) {\r\n    //     if (output[i] == 1) {\r\n    //         count++;\r\n    //     }\r\n    // }\r\n    // console.log(output);\r\n    // console.log(count);\r\n\r\n    this.forceDataBuffer = this.device.createBuffer({\r\n      size: nodeLength * 2 * 4,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    var iterationTimes: Array<number> = [];\r\n    var totalStart = performance.now();\r\n    var applyBindGroup = this.device.createBindGroup({\r\n      layout: this.applyForcesPipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.nodeDataBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.forceDataBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    const bindGroupTree = this.device.createBindGroup({\r\n      layout: this.bindGroupLayoutTree,\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: { buffer: this.nodeDataBuffer },\r\n        },\r\n\r\n        {\r\n          binding: 1,\r\n          resource: { buffer: this.treeBuffer },\r\n        },\r\n\r\n        {\r\n          binding: 2,\r\n          resource: { buffer: this.uniformParameterBuffer },\r\n        },\r\n        {\r\n          binding: 3,\r\n          resource: { buffer: this.lastIndexBuffer },\r\n        },\r\n      ],\r\n    });\r\n\r\n    var treeComputePass = commandEncoder.beginComputePass();\r\n    treeComputePass.setPipeline(this.computeTreePipeline);\r\n    treeComputePass.setBindGroup(0, bindGroupTree);\r\n    treeComputePass.dispatch(nodeLength, 1, 1);\r\n    treeComputePass.endPass();\r\n\r\n    let gpuReadTreeBuffer = this.device.createBuffer({\r\n      size: nodeLength * 16,\r\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\r\n    });\r\n    commandEncoder.copyBufferToBuffer(\r\n      this.treeBuffer,\r\n      0,\r\n      gpuReadTreeBuffer,\r\n      0,\r\n      nodeLength * 6\r\n    );\r\n\r\n    while (\r\n      iterationCount > 0 &&\r\n      this.coolingFactor > 0.000001 &&\r\n      this.force >= 0\r\n    ) {\r\n      iterationCount--;\r\n      // Set up params (node length, edge length)\r\n      var upload = this.device.createBuffer({\r\n        size: 4 * 4,\r\n        usage: GPUBufferUsage.COPY_SRC,\r\n        mappedAtCreation: true,\r\n      });\r\n      var mapping = upload.getMappedRange();\r\n      new Uint32Array(mapping).set([nodeLength, edgeLength]);\r\n      new Float32Array(mapping).set([this.coolingFactor, l], 2);\r\n      upload.unmap();\r\n      //this.device.createQuerySet({})\r\n      var commandEncoder = this.device.createCommandEncoder();\r\n      //commandEncoder.writeTimestamp();\r\n      commandEncoder.copyBufferToBuffer(upload, 0, this.paramsBuffer, 0, 4 * 4);\r\n      // Create bind group\r\n\r\n      var bindGroup = this.device.createBindGroup({\r\n        layout: this.computeForcesPipeline.getBindGroupLayout(0),\r\n        entries: [\r\n          {\r\n            binding: 0,\r\n            resource: {\r\n              buffer: this.nodeDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 1,\r\n            resource: {\r\n              buffer: this.adjMatrixBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 2,\r\n            resource: {\r\n              buffer: this.forceDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 3,\r\n            resource: {\r\n              buffer: this.paramsBuffer,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n\r\n      var attractBindGroup = this.device.createBindGroup({\r\n        layout: this.computeAttractForcesPipeline.getBindGroupLayout(0),\r\n        entries: [\r\n          {\r\n            binding: 0,\r\n            resource: {\r\n              buffer: this.nodeDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 1,\r\n            resource: {\r\n              buffer: this.edgeDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 2,\r\n            resource: {\r\n              buffer: this.forceDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 3,\r\n            resource: {\r\n              buffer: this.paramsBuffer,\r\n            },\r\n          },\r\n          // {\r\n          //     binding:4,\r\n          //     resource: {\r\n          //         buffer: this.maxForceBuffer\r\n          //     }\r\n          // }\r\n        ],\r\n      });\r\n\r\n      // Run attract forces pass\r\n      // var pass = commandEncoder.beginComputePass();\r\n      // pass.setBindGroup(0, attractBindGroup);\r\n      // pass.setPipeline(this.computeAttractForcesPipeline);\r\n      // pass.dispatch(1, 1, 1);\r\n      // pass.endPass();\r\n      // this.device.queue.submit([commandEncoder.finish()]);\r\n      // var start : number = performance.now();\r\n      // await this.device.queue.onSubmittedWorkDone();\r\n      // var end : number = performance.now();\r\n      // console.log(`attract force time: ${end - start}`)\r\n      // var commandEncoder = this.device.createCommandEncoder();\r\n\r\n      // Run compute forces pass\r\n      var pass = commandEncoder.beginComputePass();\r\n      pass.setBindGroup(0, bindGroup);\r\n      pass.setPipeline(this.computeForcesPipeline);\r\n      pass.dispatch(nodeLength, 1, 1);\r\n      pass.endPass();\r\n\r\n      // Testing timing of both passes (comment out when not debugging)\r\n      // pass.endPass();\r\n      // this.device.queue.submit([commandEncoder.finish()]);\r\n      // var start : number = performance.now();\r\n      // await this.device.queue.onSubmittedWorkDone();\r\n      // var end : number = performance.now();\r\n      // console.log(`compute force time: ${end - start}`)\r\n      // var commandEncoder = this.device.createCommandEncoder();\r\n\r\n      // const gpuReadBuffer = this.device.createBuffer({\r\n      //     size: nodeLength * 2 * 4,\r\n      //     usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\r\n      // });\r\n      // // Encode commands for copying buffer to buffer.\r\n      // commandEncoder.copyBufferToBuffer(\r\n      //     this.forceDataBuffer /* source buffer */ ,\r\n      //     0 /* source offset */ ,\r\n      //     gpuReadBuffer /* destination buffer */ ,\r\n      //     0 /* destination offset */ ,\r\n      //     nodeLength * 2 * 4 /* size */\r\n      // );\r\n      var pass = commandEncoder.beginComputePass();\r\n\r\n      //commandEncoder.writeTimestamp();\r\n\r\n      // Run apply forces pass\r\n      pass.setBindGroup(0, applyBindGroup);\r\n      pass.setPipeline(this.applyForcesPipeline);\r\n      pass.dispatch(nodeLength, 1, 1);\r\n      pass.endPass();\r\n\r\n      this.device.queue.submit([commandEncoder.finish()]);\r\n      var start: number = performance.now();\r\n      await this.device.queue.onSubmittedWorkDone();\r\n      var end: number = performance.now();\r\n      console.log(`iteration time ${end - start}`);\r\n      iterationTimes.push(end - start);\r\n\r\n      // this.maxForceResultBuffer.unmap();\r\n      // Read all of the forces applied.\r\n      // await gpuReadBuffer.mapAsync(GPUMapMode.READ);\r\n      // const arrayBuffer = gpuReadBuffer.getMappedRange();\r\n      // var output = new Float32Array(arrayBuffer);\r\n      // console.log(output);\r\n      this.coolingFactor = this.coolingFactor * coolingFactor;\r\n    }\r\n    var totalEnd = performance.now();\r\n    var iterAvg: number =\r\n      iterationTimes.reduce(function (a, b) {\r\n        return a + b;\r\n      }) / iterationTimes.length;\r\n    iterRef.current!.innerText = `Completed in ${\r\n      iterationTimes.length\r\n    } iterations with total time ${\r\n      totalEnd - totalStart\r\n    } and average iteration time ${iterAvg}`;\r\n  }\r\n}\r\n\r\nexport default ForceDirected;\r\n"]}